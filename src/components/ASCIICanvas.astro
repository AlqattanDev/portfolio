---
/**
 * ASCII Canvas Component
 * Extracted from Header.astro - handles ASCII art animation
 */
import type { BaseComponentProps } from '@/types';

export interface ASCIICanvasProps extends BaseComponentProps {
  canvasId?: string;
  width?: number;
  height?: number;
  enableAnimations?: boolean;
}

const {
  canvasId = 'ascii-canvas',
  width,
  height,
  className = '',
  ...props
} = Astro.props as ASCIICanvasProps;
---

<div class={`ascii-canvas-container ${className}`} {...props}>
  <canvas id={canvasId} width={width} height={height}></canvas>
</div>

<style>
  /* ASCII Canvas Container - Enhanced Responsive Height with Container Queries */
  .ascii-canvas-container {
    position: relative;
    width: 100%;
    /* Enhanced fluid sizing with better scaling factors */
    height: clamp(80px, 15vw + 2rem, 200px);
    margin-bottom: clamp(12px, 2vw, 24px);
    /* Improved performance optimizations */
    will-change: transform;
    contain: layout style paint;
    /* Better aspect ratio maintenance */
    aspect-ratio: 6 / 1;
    max-height: 25vh; /* Ensure it doesn't take too much vertical space */
  }

  body.print-view .ascii-canvas-container {
    height: 180px;
    margin-bottom: 20px;
    display: block !important;
  }

  canvas {
    width: 100%;
    height: 100%;
    display: block;
    /* Enhanced canvas rendering optimization */
    image-rendering: pixelated;
    image-rendering: -moz-crisp-edges;
    image-rendering: crisp-edges;
    /* Better scaling on high-DPI displays */
    object-fit: contain;
    object-position: center;
    /* Improved font rendering for text */
    text-rendering: geometricPrecision;
  }

  /* Enhanced mobile-first responsive optimizations */
  @media (max-width: 768px) {
    .ascii-canvas-container {
      /* Height is now handled by the main clamp() function */
      aspect-ratio: 5 / 1; /* Slightly taller on tablets */
      /* Reduce animation complexity on mobile */
      opacity: 0.95;
    }
  }

  @media (max-width: 480px) {
    .ascii-canvas-container {
      aspect-ratio: 4 / 1; /* Even more compact on phones */
      max-height: 20vh;
      /* Further reduce complexity on small screens */
      opacity: 0.9;
    }
  }

  @media (max-width: 375px) {
    .ascii-canvas-container {
      aspect-ratio: 3.5 / 1; /* Most compact for small phones */
      max-height: 18vh;
      opacity: 0.85;
    }
  }

  /* Ultra-wide screen optimizations */
  @media (min-width: 1440px) {
    .ascii-canvas-container {
      aspect-ratio: 8 / 1; /* Wider ratio for large screens */
      max-height: 220px;
    }
  }

  /* Performance optimizations for touch devices */
  @media (hover: none) {
    .ascii-canvas-container {
      /* Reduce animation complexity on touch devices */
      will-change: auto;
      contain: layout;
    }

    canvas {
      /* Disable complex filtering on mobile */
      filter: none !important;
    }
  }

  /* Reduce motion for users who prefer it */
  @media (prefers-reduced-motion: reduce) {
    .ascii-canvas-container {
      opacity: 1;
      will-change: auto;
    }

    canvas {
      animation: none !important;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    canvas {
      filter: contrast(1.2);
    }
  }

  body.print-view canvas {
    filter: none !important;
    opacity: 1 !important;
    display: block !important;
  }

  /* Vim mode styles moved to Layout.astro status bar */

  /* Cursor styles based on vim mode */
  body.digital-view {
    cursor: crosshair;
  }

  body.digital-view.vim-normal {
    cursor: crosshair;
  }

  body.digital-view.vim-insert {
    cursor: text;
  }

  body.digital-view.vim-visual {
    cursor: cell;
  }

  body.digital-view.vim-command {
    cursor: help;
  }

  /* Digital/Print View Toggles */
  body.print-view .digital-only {
    display: none;
  }
</style>

<script>
  import { ASCIIAnimationSystem } from '@/utils/animations';

  // Mobile-optimized ASCII animation initialization
  document.addEventListener('DOMContentLoaded', () => {
    const initializeAnimation = async () => {
      try {
        const canvasElement = document.getElementById('ascii-canvas');
        if (!canvasElement) return;

        // Check if device supports smooth animations
        const isMobile =
          /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
            navigator.userAgent
          );

        // Check battery level safely
        try {
          if ('getBattery' in navigator) {
            await navigator.getBattery();
          }
        } catch (batteryError) {
          // Battery API not available, assume normal power mode
        }

        // Always initialize animation system to enable vim bindings
        // Ignore all performance checks and browser preferences - always enable animations

        // Create animation system with maximum quality settings
        const animationSystem = new ASCIIAnimationSystem('ascii-canvas');

        // Always run at highest quality - no mobile optimizations

        // Store reference for potential cleanup
        (
          window as Window & { asciiAnimationSystem?: ASCIIAnimationSystem }
        ).asciiAnimationSystem = animationSystem;

        // Enhanced visibility handling
        document.addEventListener('visibilitychange', () => {
          if (document.hidden) {
            animationSystem.pause();
          } else {
            // Only resume if page has been visible for 500ms (avoid rapid switching)
            setTimeout(() => {
              if (!document.hidden) {
                animationSystem.resume();
              }
            }, 500);
          }
        });

        // Memory management for mobile
        let memoryCheckInterval: number;
        if (isMobile && 'memory' in performance) {
          memoryCheckInterval = setInterval(() => {
            const memoryInfo = (
              performance as Performance & {
                memory: { usedJSHeapSize: number; jsHeapSizeLimit: number };
              }
            ).memory;
            if (memoryInfo.usedJSHeapSize > memoryInfo.jsHeapSizeLimit * 0.8) {
              animationSystem.pause();
              clearInterval(memoryCheckInterval);
            }
          }, 10000); // Check every 10 seconds
        }

        // Enhanced cleanup on page unload
        window.addEventListener('beforeunload', () => {
          if (memoryCheckInterval) clearInterval(memoryCheckInterval);
          animationSystem.destroy();
        });

        // Pause animations when battery is low (if supported)
        if ('getBattery' in navigator) {
          try {
            const battery = await navigator.getBattery();
            const handleBatteryChange = () => {
              if (battery.level < 0.15 && !battery.charging) {
                animationSystem.pause();
              } else if (battery.level > 0.25 || battery.charging) {
                animationSystem.resume();
              }
            };

            battery.addEventListener('levelchange', handleBatteryChange);
            battery.addEventListener('chargingchange', handleBatteryChange);
          } catch (batteryError) {
            // Battery event listeners not available
          }
        }
      } catch (error) {
        // Failed to initialize ASCII animation system
      }
    };

    // Call the async initialization function
    initializeAnimation();
  });
</script>
