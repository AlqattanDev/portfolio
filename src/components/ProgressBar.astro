---
/**
 * ProgressBar Component
 * Top reading progress indicator
 */
export interface ProgressBarProps {
  className?: string;
}

const { className = '' } = Astro.props as ProgressBarProps;
---

<div
  class={`progress-bar digital-only ${className}`}
  role="progressbar"
  aria-label="Reading progress"
  aria-valuemin="0"
  aria-valuemax="100"
  aria-valuenow="0"
>
  <div class="progress"></div>
</div>

<style>
  /* Styles already imported in Layout.astro */

  /* Progress Bar */
  .progress-bar {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: var(--muted-digital);
    z-index: var(--z-toast);
  }

  .progress-bar .progress {
    height: 100%;
    width: 0%;
    background: var(--foreground-digital);
    box-shadow: 0 0 12px var(--color-focus-ring);
    transition: width var(--transition-fast) var(--ease-out);
  }
</style>

<script>
  // Progress Bar Update Logic
  const initProgressBar = () => {
    const progressEl = document.querySelector(
      '.progress-bar .progress'
    ) as HTMLElement | null;
    const progressRing = document.querySelector(
      '.progress-ring'
    ) as SVGCircleElement | null;
    const progressPercentage = document.querySelector(
      '.progress-percentage'
    ) as HTMLElement | null;

    // Throttle function for performance
    function throttle(func: (...args: unknown[]) => void, limit: number) {
      let inThrottle: boolean;
      return function (this: unknown, ...args: unknown[]) {
        if (!inThrottle) {
          func.apply(this, args);
          inThrottle = true;
          setTimeout(() => (inThrottle = false), limit);
        }
      };
    }

    let lastPercent = -1; // Cache to avoid unnecessary DOM updates
    let lastAnnouncedPercent = -1; // Cache for screen reader announcements

    const updateProgress = () => {
      try {
        const scrollTop =
          window.scrollY || document.documentElement.scrollTop || 0;
        const docHeight = Math.max(
          document.documentElement.scrollHeight - window.innerHeight,
          1
        );
        const percent = Math.min(
          100,
          Math.max(0, Math.round((scrollTop / docHeight) * 100))
        );

        // Only update if percentage changed (performance optimization)
        if (percent !== lastPercent) {
          lastPercent = percent;

          // Batch DOM updates using requestAnimationFrame
          requestAnimationFrame(() => {
            // Update progress bar
            if (progressEl) {
              progressEl.style.width = percent + '%';
              const progressBar = progressEl.parentElement;
              if (progressBar) {
                progressBar.setAttribute('aria-valuenow', percent.toString());
              }
            }

            // Update circular progress (in status bar if exists)
            if (progressRing && progressPercentage) {
              const circumference = 157;
              const offset = circumference - (percent / 100) * circumference;
              progressRing.style.strokeDashoffset = offset.toString();
              progressPercentage.textContent = `${percent}%`;

              const progressCircle = progressRing.closest(
                '.status-progress-container'
              );
              if (progressCircle) {
                progressCircle.setAttribute(
                  'aria-valuenow',
                  percent.toString()
                );
              }
            }

            // Announce progress milestones to screen readers
            if (
              percent > 0 &&
              percent % 25 === 0 &&
              percent !== lastAnnouncedPercent
            ) {
              const srAnnouncements =
                document.getElementById('sr-announcements');
              if (srAnnouncements) {
                srAnnouncements.textContent = `Reading progress: ${percent}% complete`;
                lastAnnouncedPercent = percent;
              }
            }
          });
        }
      } catch (error) {
        // Fail silently
      }
    };

    // Use throttled scroll listener for better performance
    const throttledUpdateProgress = throttle(updateProgress, 16); // ~60fps

    window.addEventListener('scroll', throttledUpdateProgress, {
      passive: true,
    });

    // Initial update
    updateProgress();
  };

  // Initialize when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initProgressBar);
  } else {
    initProgressBar();
  }
</script>
