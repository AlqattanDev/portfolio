---
import type { UserProfile } from '@/types/index.ts';

export interface ContactProps {
  profile: UserProfile;
}

const { profile } = Astro.props as ContactProps;
---

<div class="contact-container">
  <div class="contact-header">
    <span class="command-prompt">$ cat ~/.contact</span>
    <div class="status-indicator">
      <span class="status-dot"></span>
      <span class="status-text">Available</span>
    </div>
  </div>

  <div class="contact-grid enhanced">
    {
      profile.personal?.location && (
        <div class="contact-card" data-contact-type="location">
          <div class="contact-icon">[LOC]</div>
          <div class="contact-content">
            <div class="contact-title">Location</div>
            <div class="contact-description">{profile.personal.location}</div>
          </div>
        </div>
      )
    }

    <div class="contact-card interactive" data-contact-type="email">
      <div class="contact-icon">[EMAIL]</div>
      <div class="contact-content">
        <div class="contact-title">Email</div>
        <a
          class="contact-description contact-link"
          href={`mailto:${profile.contact.email}`}
        >
          {profile.contact.email}
        </a>
      </div>
    </div>

    {
      profile.personal?.website && (
        <div class="contact-card interactive" data-contact-type="website">
          <div class="contact-icon">[WEB]</div>
          <div class="contact-content">
            <div class="contact-title">Website</div>
            <a
              class="contact-description contact-link"
              href={profile.personal.website}
              target="_blank"
              rel="noopener noreferrer"
            >
              {profile.personal.website}
            </a>
          </div>
        </div>
      )
    }

    {
      profile.social?.linkedin && (
        <div class="contact-card interactive" data-contact-type="social">
          <div class="contact-icon">[LINK]</div>
          <div class="contact-content">
            <div class="contact-title">LinkedIn</div>
            <a
              class="contact-description contact-link"
              href={profile.social.linkedin}
              target="_blank"
              rel="noopener noreferrer"
            >
              {profile.social.linkedin}
            </a>
          </div>
        </div>
      )
    }

    {
      profile.social?.github && (
        <div class="contact-card interactive" data-contact-type="social">
          <div class="contact-icon">[GIT]</div>
          <div class="contact-content">
            <div class="contact-title">GitHub</div>
            <a
              class="contact-description contact-link"
              href={profile.social.github}
              target="_blank"
              rel="noopener noreferrer"
            >
              {profile.social.github}
            </a>
          </div>
        </div>
      )
    }
  </div>
</div>

<style>
  .contact-container {
    position: relative;
    opacity: 0;
    transform: translateY(10px);
    animation: contactFadeIn 0.8s ease forwards;
    animation-delay: 0.1s;
  }

  @keyframes contactFadeIn {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .contact-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 16px;
    padding-bottom: 8px;
    border-bottom: 1px solid rgba(var(--theme-accent-rgb, 0, 255, 65), 0.2);
  }

  .command-prompt {
    font-family: 'JetBrains Mono', monospace;
    font-size: 11px;
    color: var(--muted-digital);
    opacity: 0.8;
  }

  .status-indicator {
    display: flex;
    align-items: center;
    gap: 6px;
    font-size: 10px;
    color: var(--muted-digital);
  }

  .status-dot {
    width: 6px;
    height: 6px;
    background: #00ff41;
    border-radius: 50%;
    animation: pulse 2s ease-in-out infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.6;
      transform: scale(1.2);
    }
  }

  .contact-grid.enhanced {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 16px;
    margin-top: 16px;
  }

  .contact-card {
    position: relative;
    display: flex;
    align-items: flex-start;
    gap: 12px;
    padding: 14px;
    border: 1px solid rgba(var(--theme-accent-rgb, 0, 255, 65), 0.1);
    border-radius: 4px;
    background: rgba(var(--theme-accent-rgb, 0, 255, 65), 0.02);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    overflow: hidden;
  }

  .contact-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(var(--theme-accent-rgb, 0, 255, 65), 0.4),
      transparent
    );
    transition: left 0.6s ease;
  }

  .contact-card:hover::before {
    left: 100%;
  }

  .contact-card.interactive:hover {
    transform: translateY(-2px);
    border-color: rgba(var(--theme-accent-rgb, 0, 255, 65), 0.3);
    background: rgba(var(--theme-accent-rgb, 0, 255, 65), 0.04);
    box-shadow: 0 4px 12px rgba(var(--theme-accent-rgb, 0, 255, 65), 0.1);
  }

  .contact-icon {
    font-family: 'JetBrains Mono', monospace;
    font-size: 10px;
    font-weight: 500;
    color: var(--theme-accent, #00ff41);
    opacity: 0.8;
    min-width: 50px;
    text-align: center;
    padding: 2px 0;
    transition: all 0.3s ease;
  }

  .contact-card:hover .contact-icon {
    opacity: 1;
    transform: scale(1.05);
  }

  .contact-content {
    flex: 1;
    min-width: 0;
  }

  .contact-title {
    font-weight: var(--font-weight-bold);
    font-size: var(--font-size-md);
    color: var(--foreground-digital);
    margin-bottom: 4px;
    transition: color 0.3s ease;
  }

  .contact-card:hover .contact-title {
    color: var(--theme-accent, #00ff41);
  }

  .contact-description {
    font-size: var(--font-size-base);
    color: var(--muted-digital);
    line-height: var(--line-height-relaxed);
    word-break: break-word;
    transition: color 0.3s ease;
  }

  .contact-link {
    text-decoration: none;
    border-bottom: 1px dotted var(--muted-digital);
    color: var(--foreground-digital);
    transition: all 0.3s ease;
  }

  .contact-link:hover {
    border-bottom-style: solid;
    border-bottom-color: var(--theme-accent, #00ff41);
    color: var(--theme-accent, #00ff41);
  }

  /* Contact type specific styling */
  .contact-card[data-contact-type='email']:hover {
    border-color: rgba(100, 255, 218, 0.3);
  }

  .contact-card[data-contact-type='email'] .contact-icon {
    color: #64ffda;
  }

  .contact-card[data-contact-type='social']:hover {
    border-color: rgba(255, 255, 0, 0.3);
  }

  .contact-card[data-contact-type='social'] .contact-icon {
    color: #ffff00;
  }

  /* Staggered animation for cards */
  .contact-card {
    opacity: 0;
    transform: translateX(-10px);
  }

  .contact-card.animate-in {
    opacity: 1;
    transform: translateX(0);
    transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Theme-reactive contact styling */
  .contact-card[data-theme='MATRIX'] .contact-icon,
  .contact-card[data-theme='MATRIX']:hover .contact-title {
    color: #00ff41;
  }

  .contact-card[data-theme='TRADING'] .contact-icon,
  .contact-card[data-theme='TRADING']:hover .contact-title {
    color: #ffff00;
  }

  .contact-card[data-theme='BLOCKCHAIN'] .contact-icon,
  .contact-card[data-theme='BLOCKCHAIN']:hover .contact-title {
    color: #64ffda;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .contact-grid.enhanced {
      grid-template-columns: 1fr;
      gap: 12px;
    }

    .contact-card {
      padding: 12px;
    }

    .contact-header {
      margin-bottom: 12px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .contact-container,
    .contact-card {
      animation: none;
      transition: none;
    }

    .contact-card:hover {
      transform: none;
    }

    .contact-card::before,
    .status-dot {
      animation: none;
    }

    .contact-container {
      opacity: 1;
      transform: none;
    }

    .contact-card {
      opacity: 1;
      transform: none;
    }
  }
</style>

<script>
  // Enhanced Contact Interactions
  document.addEventListener('DOMContentLoaded', () => {
    const contactCards = document.querySelectorAll('.contact-card');

    if (!contactCards.length) return;

    // Theme-reactive contact highlighting
    function updateContactTheme() {
      const animationSystem = window.asciiAnimationSystem;

      if (animationSystem) {
        const currentEffectName = animationSystem.getCurrentEffectName();
        const theme = currentEffectName.toUpperCase().replace(/\s+/g, '_');

        contactCards.forEach((card) => {
          card.setAttribute('data-theme', theme);
        });
      }
    }

    // Intersection Observer for smooth scroll animations
    const observerOptions = {
      threshold: 0.2,
      rootMargin: '-10% 0px -10% 0px',
    };

    const contactObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.classList.add('animate-in');
        }
      });
    }, observerOptions);

    // Initialize contact cards
    contactCards.forEach((card, index) => {
      // Set stagger delay for animation
      (card as HTMLElement).style.transitionDelay = `${index * 0.075}s`;
      contactObserver.observe(card);

      // Add enhanced hover interactions
      const contactType = card.getAttribute('data-contact-type');

      if (card.classList.contains('interactive')) {
        card.addEventListener('mouseenter', () => {
          // Subtle enhancement based on contact type
          const icon = card.querySelector('.contact-icon');
          if (icon && contactType === 'email') {
            (icon as HTMLElement).style.color = '#64ffda';
          } else if (icon && contactType === 'social') {
            (icon as HTMLElement).style.color = '#ffff00';
          }
        });

        card.addEventListener('mouseleave', () => {
          const icon = card.querySelector('.contact-icon');
          if (icon) {
            (icon as HTMLElement).style.color = '';
          }
        });
      }
    });

    // Listen for theme changes
    document.addEventListener('theme:changed', updateContactTheme);

    // Initialize
    updateContactTheme();

    // Add copy-to-clipboard functionality for email
    const emailLinks = document.querySelectorAll(
      '.contact-card[data-contact-type="email"] .contact-link'
    );
    emailLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        if (navigator.clipboard) {
          const email = (e.target as HTMLElement).textContent || '';
          navigator.clipboard
            .writeText(email.replace('mailto:', ''))
            .then(() => {
              // Subtle feedback
              const card = (e.target as HTMLElement).closest('.contact-card');
              if (card) {
                (card as HTMLElement).style.background =
                  'rgba(0, 255, 65, 0.1)';
                setTimeout(() => {
                  (card as HTMLElement).style.background = '';
                }, 300);
              }
            });
        }
      });
    });
  });
</script>
