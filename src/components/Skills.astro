---
/**
 * Skills Component - Refactored
 * Now uses utility functions and proper type definitions
 */
import type { SkillsProps, SkillLevel } from '@/types';
import { generateSkillBarConfig, isValidSkillLevel } from '@/utils/helpers';

const {
  skills,
  variant = 'grid',
  showProgressBars = true,
  interactive = true,
  className = '',
  ...props
} = Astro.props as SkillsProps;

// Enhanced skill bar generation with validation
const getSkillBarStyle = (level: string) => {
  if (!isValidSkillLevel(level)) {
    return generateSkillBarConfig('Beginner');
  }
  return generateSkillBarConfig(level as SkillLevel);
};
---

<div class={`skills-container skills-${variant} ${className}`} {...props}>
  <div class="skills-header">
    <span class="command-prompt">$ cat ~/.skills</span>
  </div>

  {
    skills && skills.length > 0 ? (
      <div class="skills-grid">
        {skills.map((category) => (
          <div class="category-section">
            <div class="category-header">
              <h3 class="category-name">{category.header}</h3>
              <span class="category-meta">{category.years}</span>
            </div>

            <div class="skills-list">
              {category.items.map((skill) => (
                <div
                  class={`skill-item ${interactive ? 'interactive' : ''}`}
                  data-skill-name={skill.name
                    .toLowerCase()
                    .replace(/\s+/g, '-')}
                  data-connected={
                    skill.name.toLowerCase().includes('flutter') ||
                    skill.name.toLowerCase().includes('firebase') ||
                    skill.name.toLowerCase().includes('dart')
                      ? 'true'
                      : undefined
                  }
                >
                  <div class="skill-info">
                    <div class="skill-name">{skill.name}</div>
                    <div class="skill-details">
                      <span class="skill-meta">
                        {skill.years} â€¢ {skill.projects}
                      </span>
                      <span class="skill-highlight">{skill.highlight}</span>
                    </div>
                  </div>

                  {showProgressBars && (
                    <div class="skill-progress">
                      <span class="skill-level">{skill.level}</span>
                      <code
                        class="skill-bar"
                        set:html={getSkillBarStyle(skill.level).html}
                      />
                    </div>
                  )}
                </div>
              ))}
            </div>
          </div>
        ))}
      </div>
    ) : (
      <div class="skills-error">
        <span class="error-message">! No skills data available</span>
        <span class="error-details">Skills data not provided</span>
      </div>
    )
  }
</div>

<style>
  .skills-container {
    background: transparent;
    border: none;
    padding: 0;
    font-family: 'JetBrains Mono', 'Fira Code', monospace;
    font-size: 13px;
    line-height: 1.5;
  }

  .skills-header {
    margin-bottom: 20px;
    padding-bottom: 12px;
    border-bottom: 1px solid var(--border-digital);
  }

  .command-prompt {
    color: var(--foreground-digital);
    font-weight: bold;
  }

  .skills-grid {
    display: grid;
    grid-template-columns: repeat(2, minmax(0, 1fr));
    gap: 40px 80px;
    align-items: start;
  }

  .category-section {
    display: flex;
    flex-direction: column;
    gap: 16px;
    min-width: 0;
  }

  .category-header {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    padding-bottom: 8px;
    border-bottom: 1px solid var(--border-digital);
  }

  .category-name {
    color: var(--foreground-digital);
    font-size: 14px;
    font-weight: bold;
    margin: 0;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .category-meta {
    color: var(--muted-digital);
    font-size: 11px;
    font-weight: normal;
  }

  .skills-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .skill-item {
    display: flex;
    justify-content: space-between;
    align-items: baseline;
    gap: 12px;
    padding: 10px 0;
    transition: all 0.2s ease;
    cursor: pointer;
    width: 100%;
  }

  .skill-item.interactive:hover {
    background: rgba(0, 255, 65, 0.03);
    transform: translateX(2px);
    border-left: 2px solid rgba(0, 255, 65, 0.3);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .skill-item.interactive {
    position: relative;
    overflow: hidden;
  }

  .skill-item.interactive::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(0, 255, 65, 0.1),
      transparent
    );
    transition: left 0.6s ease;
    pointer-events: none;
  }

  .skill-item.interactive:hover::before {
    left: 100%;
  }

  .skill-info {
    display: flex;
    flex-direction: column;
    gap: 4px;
    min-width: 0;
    flex: 1;
  }

  .skill-name {
    color: var(--foreground-digital);
    font-weight: 500;
    font-size: 13px;
  }

  .skill-details {
    display: flex;
    flex-direction: column;
    gap: 2px;
  }

  .skill-meta {
    color: var(--muted-digital);
    font-size: 10px;
  }

  .skill-highlight {
    color: var(--muted-digital);
    font-size: 9px;
    font-style: italic;
    opacity: 0.8;
  }

  .skill-progress {
    display: grid;
    grid-template-columns: auto 1fr;
    align-items: center;
    gap: 8px;
    flex-shrink: 0;
  }

  .skill-level {
    color: var(--muted-digital);
    font-size: 11px;
    white-space: nowrap;
  }

  .skill-bar {
    font-family:
      'JetBrains Mono', 'Fira Code', 'SF Mono', 'Monaco', 'Cascadia Code',
      monospace;
    background: rgba(0, 0, 0, 0.1);
    border: 1px solid var(--border-digital);
    border-radius: 4px;
    padding: 2px 6px;
    font-size: 12px;
    font-weight: 500;
    letter-spacing: -0.5px;
    white-space: nowrap;
    color: var(--foreground-digital);
    box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
  }

  /* Code-like styling for different block types */
  .skill-bar .filled {
    color: #00ff41;
    text-shadow: 0 0 2px rgba(0, 255, 65, 0.3);
    font-weight: 600;
    animation: subtle-glow 3s ease-in-out infinite;
  }

  .skill-bar .dither-1 {
    color: #ffff00;
    text-shadow: 0 0 2px rgba(255, 255, 0, 0.2);
    font-weight: 500;
    animation: subtle-glow 3.5s ease-in-out infinite;
    animation-delay: 0.25s;
  }

  .skill-bar .dither-2 {
    color: #ff8c00;
    text-shadow: 0 0 2px rgba(255, 140, 0, 0.2);
    font-weight: 400;
    animation: subtle-glow 4s ease-in-out infinite;
    animation-delay: 0.5s;
  }

  .skill-bar .dither-3 {
    color: #666;
    font-weight: 300;
    opacity: 0.7;
    transition: opacity 0.3s ease;
  }

  @keyframes subtle-glow {
    0%,
    100% {
      text-shadow: 0 0 2px currentColor;
      opacity: 0.9;
    }
    50% {
      text-shadow:
        0 0 4px currentColor,
        0 0 8px currentColor;
      opacity: 1;
    }
  }

  .skill-item.interactive:hover .skill-bar .filled {
    animation-duration: 1.5s;
  }

  .skill-item.interactive:hover .skill-bar .dither-1 {
    animation-duration: 1.8s;
  }

  .skill-item.interactive:hover .skill-bar .dither-2 {
    animation-duration: 2s;
  }

  /* Print Mode Styles - Strict Black and White */
  body.print-view .skills-container {
    background: white !important;
    color: black !important;
  }

  body.print-view .skills-header {
    border-bottom-color: black !important;
  }

  body.print-view .command-prompt,
  body.print-view .category-name,
  body.print-view .skill-name {
    color: black !important;
  }

  body.print-view .category-header {
    border-bottom-color: black !important;
  }

  body.print-view .skill-bar {
    background: white !important;
    border: 1px solid black !important;
    box-shadow: none !important;
    color: black !important;
  }

  body.print-view .skill-bar .filled {
    color: black !important;
    text-shadow: none !important;
    font-weight: 700 !important;
  }

  body.print-view .skill-bar .dither-1 {
    color: black !important;
    text-shadow: none !important;
    font-weight: 600 !important;
  }

  body.print-view .skill-bar .dither-2 {
    color: black !important;
    text-shadow: none !important;
    font-weight: 500 !important;
  }

  body.print-view .skill-bar .dither-3 {
    color: black !important;
    text-shadow: none !important;
    font-weight: 400 !important;
  }

  body.print-view .category-meta,
  body.print-view .skill-level,
  body.print-view .skill-meta,
  body.print-view .skill-highlight {
    color: black !important;
  }

  body.print-view .skill-item {
    background: white !important;
  }

  body.print-view .skill-item:hover {
    background: white !important;
    transform: none !important;
  }

  /* Error handling styles */
  .skills-error {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
    padding: 40px 20px;
    text-align: center;
    border: 1px dashed var(--border-digital);
    background: rgba(255, 68, 68, 0.05);
  }

  .error-message {
    color: var(--color-error);
    font-weight: bold;
    font-size: 14px;
  }

  .error-details {
    color: var(--muted-digital);
    font-size: 11px;
    opacity: 0.8;
  }

  body.print-view .skills-error {
    border-color: var(--border-print);
    background: transparent;
  }

  body.print-view .error-message {
    color: var(--foreground-print) !important;
  }

  body.print-view .error-details {
    color: var(--muted-print) !important;
  }

  /* Variant-specific styles */
  .skills-list {
    variant: 'list';
  }

  .skills-container.skills-grid {
    grid-template-columns: 1fr;
    gap: 20px;
  }

  .skills-container.skills-compact .skills-grid {
    gap: 16px;
  }

  .skills-container.skills-compact .skill-item {
    padding: 6px 0;
    gap: 16px;
  }

  .skills-container.skills-compact .category-name {
    font-size: 13px;
  }

  .skills-container.skills-compact .skill-name {
    font-size: 12px;
  }

  /* Enhanced Mobile-First Responsive Design with Container Queries */
  @media (max-width: 1024px) {
    .skills-grid {
      gap: clamp(20px, 4vw, 30px) clamp(40px, 8vw, 60px);
    }
  }

  @media (max-width: 768px) {
    .skills-container {
      font-size: var(--font-size-base);
    }

    .skills-grid {
      grid-template-columns: 1fr;
      gap: clamp(16px, 3vw, 24px);
      /* Add container query support when available */
      container-type: inline-size;
    }

    .skill-item {
      gap: clamp(12px, 2.5vw, 16px);
      padding: clamp(6px, 1.5vw, 10px) 0;
      /* Enhanced touch targets for mobile */
      min-height: var(--touch-target-min);
    }

    .skill-meta,
    .skill-highlight {
      font-size: var(--font-size-xs);
    }

    .skill-bar {
      font-size: var(--font-size-sm);
      padding: clamp(2px, 0.5vw, 4px) clamp(6px, 1.5vw, 8px);
    }
  }

  @media (max-width: 414px) {
    .skills-container {
      font-size: var(--font-size-sm);
    }

    .category-name {
      font-size: var(--font-size-md);
    }

    .skill-name {
      font-size: var(--font-size-base);
    }

    .skill-item {
      padding: clamp(4px, 1vw, 8px) 0;
      gap: clamp(8px, 2vw, 12px);
      /* Improve touch interactions */
      touch-action: manipulation;
    }

    .skill-progress {
      gap: clamp(4px, 1vw, 8px);
    }

    .skill-bar {
      font-size: var(--font-size-xs);
      padding: clamp(1px, 0.3vw, 3px) clamp(4px, 1vw, 6px);
    }
  }

  @media (max-width: 375px) {
    .skills-container {
      font-size: var(--font-size-xs);
    }

    .category-name {
      font-size: var(--font-size-base);
    }

    .skill-name {
      font-size: var(--font-size-sm);
    }

    .skill-item {
      flex-direction: column;
      gap: clamp(6px, 1.5vw, 10px);
      align-items: flex-start;
      padding: clamp(6px, 1.5vw, 10px) 0;
      /* Enhanced mobile interactions */
      touch-action: manipulation;
      -webkit-tap-highlight-color: rgba(0, 255, 65, 0.1);
    }

    .skill-progress {
      align-self: stretch;
      grid-template-columns: 1fr auto;
      gap: clamp(6px, 1.5vw, 10px);
      width: 100%;
    }

    .skill-level {
      order: 2;
      font-size: var(--font-size-2xs);
    }

    .skill-bar {
      order: 1;
      font-size: var(--font-size-2xs);
      min-width: 0; /* Allow shrinking */
      flex: 1;
    }
  }

  @media (max-width: 320px) {
    .skills-container {
      font-size: var(--font-size-2xs);
    }

    .skills-grid {
      gap: clamp(12px, 2vw, 16px);
    }

    .category-section {
      gap: clamp(8px, 1.5vw, 12px);
    }

    .category-name {
      font-size: var(--font-size-xs);
    }

    .skill-name {
      font-size: var(--font-size-2xs);
    }

    .skill-item {
      padding: clamp(4px, 1vw, 6px) 0;
      gap: clamp(4px, 1vw, 6px);
    }

    .skill-meta,
    .skill-highlight {
      font-size: calc(var(--font-size-2xs) - 1px);
      line-height: 1.3;
    }
  }

  /* Enhanced Touch Device Optimizations */
  @media (hover: none) {
    .skill-item.interactive {
      cursor: default;
      /* Enhanced touch feedback */
      -webkit-tap-highlight-color: rgba(0, 255, 65, 0.2);
      tap-highlight-color: rgba(0, 255, 65, 0.2);
    }

    .skill-item.interactive:active {
      background: rgba(0, 255, 65, 0.15);
      transform: scale(0.98);
      transition: all 0.1s ease-out;
    }

    /* Larger touch targets on touch devices */
    .skill-item {
      min-height: var(--touch-target-comfortable);
      padding: clamp(8px, 2vw, 12px) 0;
    }

    .category-header {
      min-height: var(--touch-target-min);
    }

    /* Enhanced scrolling on mobile */
    .skills-grid {
      scroll-behavior: smooth;
      -webkit-overflow-scrolling: touch;
    }
  }

  /* Progressive Web App optimizations */
  @media (display-mode: standalone) {
    .skills-container {
      /* Account for PWA status bar on mobile */
      margin-top: env(safe-area-inset-top);
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .skill-bar {
      border-width: 2px;
      font-weight: var(--font-weight-bold);
    }

    .skill-bar .filled {
      font-weight: 800;
    }
  }

  /* Skill connection indicators */
  .skill-item.interactive[data-connected] {
    position: relative;
  }

  .skill-item.interactive[data-connected]::after {
    content: '';
    position: absolute;
    right: -2px;
    top: 50%;
    width: 3px;
    height: 0;
    background: rgba(0, 255, 65, 0.4);
    transition: height 0.3s ease;
    transform: translateY(-50%);
  }

  .skill-item.interactive[data-connected]:hover::after {
    height: 60%;
  }

  /* Theme-reactive skill highlighting */
  .skills-container[data-scheme='MATRIX']
    .skill-item.interactive:hover
    .skill-name {
    color: #00ff41;
    text-shadow: 0 0 1px #00ff41;
  }

  .skills-container[data-scheme='TRADING']
    .skill-item.interactive:hover
    .skill-name {
    color: #ffff00;
    text-shadow: 0 0 1px #ffff00;
  }

  .skills-container[data-scheme='BLOCKCHAIN']
    .skill-item.interactive:hover
    .skill-name {
    color: #64ffda;
    text-shadow: 0 0 1px #64ffda;
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .skill-item {
      transition: none;
    }

    .skill-item.interactive:hover,
    .skill-item.interactive:active {
      transform: none;
    }

    .skill-bar .filled,
    .skill-bar .dither-1,
    .skill-bar .dither-2 {
      animation: none !important;
    }

    .skill-item.interactive::before {
      display: none;
    }
  }
</style>

<script>
  // Theme-reactive Skills Enhancement
  document.addEventListener('DOMContentLoaded', () => {
    const skillsContainer = document.querySelector('.skills-container');
    const skillItems = document.querySelectorAll('.skill-item.interactive');

    if (!skillsContainer || !skillItems.length) return;

    // Update skills container with current theme
    function updateSkillsTheme() {
      const animationSystem = window.asciiAnimationSystem;

      if (animationSystem) {
        const currentEffectName = animationSystem.getCurrentEffectName();
        skillsContainer.setAttribute(
          'data-scheme',
          currentEffectName.toUpperCase().replace(/\s+/g, '_')
        );
      }
    }

    // Subtle skill connection highlighting
    function setupSkillConnections() {
      const connections = {
        flutter: ['dart', 'firebase', 'mobile-development'],
        firebase: ['flutter', 'real-time-analytics', 'push-notifications'],
        dart: ['flutter', 'mobile-development'],
        rust: ['systems-programming', 'performance-optimization'],
        ai: ['machine-learning', 'innovation', 'research'],
      };

      skillItems.forEach((item) => {
        const skillName = item.getAttribute('data-skill-name');

        item.addEventListener('mouseenter', () => {
          const relatedSkills = connections[skillName] || [];

          // Subtle highlight of related skills
          skillItems.forEach((otherItem) => {
            const otherSkillName = otherItem.getAttribute('data-skill-name');

            if (relatedSkills.includes(otherSkillName)) {
              otherItem.style.opacity = '0.7';
              otherItem.style.transform = 'translateX(1px)';
              otherItem.style.transition = 'all 0.3s ease';
            }
          });
        });

        item.addEventListener('mouseleave', () => {
          skillItems.forEach((otherItem) => {
            otherItem.style.opacity = '';
            otherItem.style.transform = '';
          });
        });
      });
    }

    // Listen for theme changes
    document.addEventListener('theme:changed', updateSkillsTheme);

    // Initialize
    updateSkillsTheme();
    setupSkillConnections();

    // Intersection Observer for scroll animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '-10% 0px -10% 0px',
    };

    const skillsObserver = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          entry.target.style.opacity = '1';
          entry.target.style.transform = 'translateY(0)';
          entry.target.style.transition =
            'all 0.6s cubic-bezier(0.4, 0, 0.2, 1)';
        }
      });
    }, observerOptions);

    // Apply subtle entrance animation
    skillItems.forEach((item, index) => {
      item.style.opacity = '0';
      item.style.transform = 'translateY(10px)';
      item.style.transitionDelay = `${index * 0.1}s`;
      skillsObserver.observe(item);
    });
  });
</script>
